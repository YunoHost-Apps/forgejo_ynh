#!/bin/bash

#=================================================
# GENERIC START
#=================================================

# Load common variables and helpers
source ./experimental_helper.sh
source ./_common.sh

# IMPORT GENERIC HELPERS
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_normalize_url_path --path_url $(ynh_app_setting_get --app $app --key path))
db_password=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
admin=$(ynh_app_setting_get --app=$app --key=adminusername)
key=$(ynh_app_setting_get --app=$app --key=secret_key)
lfs_key=$(ynh_app_setting_get --app=$app --key=lfs_key)
port=$(ynh_app_setting_get --app=$app --key=web_port)
upstream_version=$(ynh_app_setting_get --app=$app --key=upstream_version)

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

# We stop the service before to set ynh_clean_setup
ynh_systemd_action --service_name=$app --action="stop"

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

if [ "0$(ynh_app_setting_get --app=$app --key=disable_backup_before_upgrade)" -ne 1 ]
then
    ynh_backup_before_upgrade
    ynh_clean_setup () {
        # Clean installation remainings that are not handled by the remove script.
        ynh_clean_check_starting
        ynh_restore_upgradebackup
    }
fi

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If lfs_key doesn't exist, create it
if [ -z "$lfs_key" ]; then
   lfs_key=$(ynh_string_random)
   ynh_app_setting_set --app=$app --key=lfs_key --value=$lfs_key
fi

#=================================================
# MIGRATION FROM GOGS
#=================================================

# [[ $YNH_APP_ID == "gogs" ]] \
#     && [[ "$(cat "/opt/$app/templates/.VERSION")" != 0.11.79.1211 ]] \
#     && ynh_die --message "It look like that you have an old Gogs install. You need first upgrade Gogs instance (id: $gogs_migrate_id) and after migrate to Gitea."
# ynh_handle_app_migration --migration_id=gogs --migration_list=gogs_migrations
# 
# if [[ $migration_process -eq 1 ]]; then
#     # Reload variables
#     dbname=$app
#     db_user=$app
#     final_path="/opt/$app"
#     datadir="/home/""$app"
#     repos_path="$datadir/repositories"
#     data_path="$datadir/data"
# 
#     # Replace the user
#     ynh_system_user_delete $old_app
#     test getent passwd "$app" &>/dev/null || \
#         useradd -d "$datadir" --system --user-group "$app" --shell /bin/bash || \
#             ynh_die --message "Unable to create $app system account"
# 
#     # Clean old binary
#     ynh_secure_remove --file=$final_path/gogs
#     ynh_secure_remove --file=$final_path/custom/conf/auth.d
# 
#     # Restore authentication from SQL database
#     ynh_replace_string --match_string __APP__ --replace_string "$app" --target_file ../conf/login_source.sql
#     ynh_mysql_connect_as "$db_user" "$db_password" "$dbname" < ../conf/login_source.sql
# 
#     # Fix hooks
#     if [[ -e $repos_path ]];then
#         ls $repos_path/*/*.git/hooks/pre-receive | while read p; do
#             ynh_secure_remove --file=$p
#         done
#         ls $repos_path/*/*.git/hooks/post-receive | while read p; do
#             ynh_secure_remove --file=$p
#         done
#     fi
# 
#     upstream_version="0.0.1"
# fi

# Move data directory
if [ -e "/home/""$app" ] && [ ! -e $datadir ]; then
    mv "/home/""$app" "$datadir"
fi

# Ensuring the user has the right home dir
if [ ~$app != "$datadir" ]; then
    usermod -d "$datadir" $app
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
ynh_script_progression --message="Configuring application..."

# Clean template to fix issue : https://github.com/gogits/gogs/issues/4585
ynh_secure_remove --file="/opt/$app/templates"

# Configure forgejo with app.ini file
config_forgejo

# Configure init script
ynh_script_progression --message="Updating systemd units..."
ynh_add_systemd_config

# Modify Nginx configuration file and copy it to NGINX conf directory
ynh_script_progression --message="Configuring NGINX..." --weight=1
config_nginx

#=================================================
# DB migration
#=================================================
ynh_script_progression --message="Upgrading database and sources..." --weight=6

restart_forgejo() {
    # Set permissions
    set_permission
    ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/forgejo.log" --line_match="Starting new Web server: tcp:127.0.0.1:"
    # Leave the time to update the database schema
    sleep 5
    systemctl stop $app
}

# Install forgejo source
ynh_setup_source $final_path source/$architecture
restart_forgejo

# SETUP FAIL2BAN
ynh_script_progression --message="Configuring Fail2Ban..."
ynh_add_fail2ban_config --logpath="/var/log/$app/forgejo.log" --failregex=".*Failed authentication attempt for .* from <HOST>" --max_retry 5

#=================================================
# GENERIC FINALIZATION
#=================================================

# Set all permissions
ynh_script_progression --message="Update permission..."
if ! ynh_permission_exists --permission admin; then
    ynh_app_setting_delete --app $app --key unprotected_uris
    ynh_permission_create --permission="admin" --allowed="$admin"
    # Update ldap config
    ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="../conf/login_source.sql"
    ynh_mysql_connect_as "$db_user" "$db_password" "$dbname" < ../conf/login_source.sql
fi

# Add forgejo to YunoHost's monitored services
ynh_script_progression --message="Register Forgejo service..."
yunohost service add "$app" --log="/var/log/$app/forgejo.log"

# Add ssh permission for forgejo user
adduser $app ssh.app

# Set permissions
ynh_script_progression --message="Protecting directory"
set_permission

# Save Version
ynh_app_setting_set --app=$app --key=upstream_version --value=$(ynh_app_upstream_version)

# Reload services
ynh_script_progression --message="Starting Forgejo services..." --weight=3
#ynh_systemd_action -l "Starting new Web server: tcp:127.0.0.1:" -p "/var/log/$app/gitea.log" -t 10
#sleep 1
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/forgejo.log" --line_match="Starting new Web server: tcp:127.0.0.1:"

# Store the checksum with the 'INTERNAL_TOKEN' value.
# Should be removed when the issue https://github.com/go-gitea/gitea/issues/3246 is fixed
ynh_store_file_checksum --file="$final_path/custom/conf/app.ini"

#=================================================
# FINISH MIGRATION PROCESS
#=================================================

# if [[ $migration_process -eq 1 ]]; then
#     echo "Gogs has been successfully migrated to Gitea! \
# A last scheduled operation will run in a couple of minutes to finish the \
# migration in YunoHost side. Do not proceed any application operation while \
# you don't see Gogs as installed." >&2
# 
#     # Execute a post migration script after the end of this upgrade.
#     # Mainly for some cleaning
#     script_post_migration=gogs_post_migration.sh
#     ynh_replace_string --match_string __OLD_APP__ --replace_string "$old_app" --target_file ../conf/$script_post_migration
#     ynh_replace_string --match_string __NEW_APP__ --replace_string "$app" --target_file ../conf/$script_post_migration
#     cp ../conf/$script_post_migration /tmp
#     chmod +x /tmp/$script_post_migration
#     (cd /tmp; echo "/tmp/$script_post_migration > /tmp/$script_post_migration.log 2>&1" | at now + 2 minutes)
# fi

ynh_script_progression --message="Upgrade of $app completed" --last
